{"version":3,"sources":["components/Choice.tsx","components/Question.tsx","util/apiClient.js","util/queries.js","util/helper.ts","util/types.ts","components/LoadingSpinner.tsx","components/Progress/Progress.tsx","components/End/End.tsx","components/Start/Start.tsx","pages/quiz/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Choice","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlerChoiceSelected","bind","assertThisInitialized","e","className","body","correct","react_default","a","createElement","type","name","question","id","value","JSON","stringify","onChange","htmlFor","Component","Question","_ref","choices","onAnswerSelected","keys","map","idx","components_Choice","key","cache","InMemoryCache","link","HttpLink","uri","apiClient","ApolloClient","GET_QUESTIONS","gql","_templateObject","shuffle","array","tmp","randomIndex","currentIndex","length","Math","floor","random","Queue","queue","_queue","createClass","item","push","shift","get","Stack","stack","_stack","pop","LoadingSpinner","width","height","viewBox","xmlns","cx","cy","r","Progress","score","missed","total","style","color","clean","localStorage","clear","location","reload","socialWindow","url","left","screen","params","window","open","End","text","linkedin","facebook","twitter","target","href","onClick","Start","onStart","Quiz","_missed","state","current","count","cursor","status","loading","start","handlerAnswerSelected","fixStorageCorrupt","getItem","remotely","locally","prevProps","prevState","setItem","corrupt","fetch","parse","setState","_this2","console","log","setTimeout","query","variables","after","then","data","questions","mapQuestions","hasMore","catch","err","message","reformatted","newQ","next","dequeued","dequeue","choice","eval","isEmpty","entries","constructor","components_Start_Start","components_LoadingSpinner","components_End_End","react_addons_css_transition_group_default","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppearTimeout","components_Question","components_Progress_Progress","App","quiz","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","contentType","headers","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"uUAoDeA,cAzCX,SAAAA,EAAYC,GAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACvBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,sBAAwBP,EAAKO,sBAAsBC,KAA3BP,OAAAQ,EAAA,EAAAR,CAAAD,IAHNA,qFAaLU,GAClBP,KAAKJ,MAAMQ,sBAAsBG,oCAIjC,IAAMX,EAAQI,KAAKJ,MAEbY,EAAmC,SAAvBZ,EAAMa,KAAKC,QAAqB,2BAA6B,oBAE/E,OACIC,EAAAC,EAAAC,cAAA,MAAIL,UAAU,yBACVG,EAAAC,EAAAC,cAAA,SACIC,KAAK,QACLN,UAAWA,EACXO,KAAM,aAAenB,EAAMoB,SAC3BC,GAAIrB,EAAMa,KAAKA,KACfS,MAAOC,KAAKC,UAAUxB,EAAMa,MAC5BY,SAAUrB,KAAKI,wBAGnBO,EAAAC,EAAAC,cAAA,SAAOL,UAAU,mBAAmBc,QAAS1B,EAAMa,KAAKA,MACnDb,EAAMa,KAAKA,cApCXc,aCkBNC,EAjBE,SAAAC,GAAiD,IAA9ChB,EAA8CgB,EAA9ChB,KAAMiB,EAAwCD,EAAxCC,QAASC,EAA+BF,EAA/BE,iBAC/B,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIL,UAAU,YAAd,KAA6BC,EAA7B,MACAE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIL,UAAU,eAENV,OAAO8B,KAAKF,GAASG,IAAI,SAAAC,GACrB,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAQC,IAAKF,EAAKrB,KAAMiB,EAAQI,GAAMd,SAAUP,EAAML,sBAAuBuB,kCCd1GM,EAAQ,IAAIC,IAEZC,EAAO,IAAIC,IAAS,CACzBC,IAAK,iCAKOC,EAAY,IAAIC,IAAa,CACtCN,QACAE,whBCZG,IAAMK,QAAgBC,GAAHC,KCFnB,SAASC,EAAWC,GAIvB,IAHA,IAAiCC,EAAKC,EAAlCC,EAAeH,EAAMI,OAGlB,IAAMD,GAETD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAMD,EAHNG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGzB,OAAOD,ECdJ,IAAMQ,EAAb,WAGI,SAAAA,EAAYC,GAAcvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,GAAApD,KAFlBsD,YAEiB,EACrBtD,KAAKsD,OAASD,GAAS,GAJ/B,OAAAvD,OAAAyD,EAAA,EAAAzD,CAAAsD,EAAA,EAAApB,IAAA,UAAAd,MAAA,SAOYsC,GACJxD,KAAKsD,OAAOG,KAAKD,KARzB,CAAAxB,IAAA,UAAAd,MAAA,WAYQ,OAAOlB,KAAKsD,OAAOI,UAZ3B,CAAA1B,IAAA,QAAAd,MAAA,WAgBQlB,KAAKsD,OAAS,KAhBtB,CAAAtB,IAAA,UAAAd,MAAA,WAwBQyB,EAAW3C,KAAKsD,UAxBxB,CAAAtB,IAAA,QAAA2B,IAAA,WAoBQ,OAAO3D,KAAKsD,OAAON,WApB3BI,EAAA,GA4BaQ,EAAb,WAGI,SAAAA,EAAYC,GAAc/D,OAAAC,EAAA,EAAAD,CAAAE,KAAA4D,GAAA5D,KAFlB8D,YAEiB,EACrB9D,KAAK8D,OAASD,GAAS,GAJ/B,OAAA/D,OAAAyD,EAAA,EAAAzD,CAAA8D,EAAA,EAAA5B,IAAA,OAAAd,MAAA,SAOSsC,GACDxD,KAAK8D,OAAOL,KAAKD,KARzB,CAAAxB,IAAA,MAAAd,MAAA,WAYQ,OAAOlB,KAAK8D,OAAOC,QAZ3B,CAAA/B,IAAA,QAAAd,MAAA,WAgBQlB,KAAK8D,OAAS,KAhBtB,CAAA9B,IAAA,UAAAd,MAAA,WAwBQyB,EAAW3C,KAAK8D,UAxBxB,CAAA9B,IAAA,QAAA2B,IAAA,WAoBQ,OAAO3D,KAAK8D,OAAOd,WApB3BY,EAAA,GCNeI,EArBQ,kBACnBrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gEACsDF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,uBAEnEG,EAAAC,EAAAC,cAAA,OAAKL,UAAU,wBACXG,EAAAC,EAAAC,cAAA,OACIL,UAAU,kBACVyD,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,MAAM,8BAENzD,EAAAC,EAAAC,cAAA,UAAQwD,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACzB5D,EAAAC,EAAAC,cAAA,UAAQwD,GAAG,KAAKC,GAAG,KAAKC,EAAE,MAC1B5D,EAAAC,EAAAC,cAAA,UAAQwD,GAAG,KAAKC,GAAG,KAAKC,EAAE,UCa3BC,SArBE,SAAA/C,GAAsC,IAAnCgD,EAAmChD,EAAnCgD,MAAOC,EAA4BjD,EAA5BiD,OAAQC,EAAoBlD,EAApBkD,MAGzBC,EAAQ,CACVX,MAHcQ,EAAQE,EAAS,IAGb,KAOtB,OACIhE,EAAAC,EAAAC,cAAA,OAAKL,UAAU,YACnBiE,EADI,IACG9D,EAAAC,EAAAC,cAAA,QAAM+D,MANJ,CACXC,MAAO,SAKE,MAAsBH,EAASD,GADlC,MACmDE,EAC/ChE,EAAAC,EAAAC,cAAA,OAAKL,UAAU,uBACXG,EAAAC,EAAAC,cAAA,QAAM+D,MAAOA,GAAOjE,EAAAC,EAAAC,cAAA,kBChB9BiE,SAAQ,WACVC,aAAaC,QAChBC,SAASC,WAGJC,EAAe,SAACC,GAClB,IACMC,GAAQC,OAAOrB,MADP,KACwB,EAEhCsB,EAAS,6DADFD,OAAOpB,OAFN,KAEwB,EACiE,SAAWmB,EAElHG,OAAOC,KAAKL,EAAK,YAAaG,IA0DnBG,EAvDH,SAAAjE,GAA4B,IAA1BgD,EAA0BhD,EAA1BgD,MAAOE,EAAmBlD,EAAnBkD,MACXS,EAAM,oCACTO,EAAO,+DAEJC,EAAW,uDAAyDR,EAAM,0BAA4BO,EAAO,kBAC7GE,EAAW,yCAA2CT,EACtDU,EAAU,wCAA0CV,EAAM,SAAWO,EAAO,kCAElF,OACIhF,EAAAC,EAAAC,cAAA,OAAKL,UAAU,OACXG,EAAAC,EAAAC,cAAA,QAAML,UAAU,SACZG,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,cAAS4D,IACpB9D,EAAAC,EAAAC,cAAA,wCAA+BF,EAAAC,EAAAC,cAAA,cAAS8D,MAIhDhE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACIF,EAAAC,EAAAC,cAAA,oEAIAF,EAAAC,EAAAC,cAAA,yGAKAF,EAAAC,EAAAC,cAAA,qCACUF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIC,KAAK,kCAAnB,WADV,KAC2ErF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIC,KAAK,uCAAnB,YAD3E,QACqJrF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIC,KAAK,yCAAnB,aADrJ,4EAIArF,EAAAC,EAAAC,cAAA,oEAC4DF,EAAAC,EAAAC,cAAA,KAAGmF,KAAK,IAAIC,QAASnB,GAArB,QAD5D,MAKRnE,EAAAC,EAAAC,cAAA,OAAKL,UAAU,UACXG,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIE,QAAS,kBAAMd,EAAaU,IAAWG,KAAMH,GAAUlF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,wBAGtFG,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIE,QAAS,kBAAMd,EAAaW,IAAUE,KAAMF,GAASnF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,qBAGpFG,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIE,QAAS,kBAAMd,EAAaS,IAAWI,KAAMJ,GAAUjF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,yBC9DhG2E,SAAe,SAACC,GACrB,IACMC,GAAQC,OAAOrB,MADP,KACwB,EAEhCsB,EAAS,6DADFD,OAAOpB,OAFN,KAEwB,EACiE,SAAWmB,EAElHG,OAAOC,KAAKL,EAAK,YAAaG,KAmDhBW,EAhDD,SAAAzE,GAAyB,IAAtB0E,EAAsB1E,EAAtB0E,QACVf,EAAM,oCACNO,EAAO,+DAEPC,EAAW,uDAAyDR,EAAM,0BAA4BO,EAAO,kBAC7GE,EAAW,yCAA2CT,EACtDU,EAAU,wCAA0CV,EAAM,SAAWO,EAAO,kCAElF,OACChF,EAAAC,EAAAC,cAAA,OAAKL,UAAU,SACdG,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yLAIAF,EAAAC,EAAAC,cAAA,mEASAF,EAAAC,EAAAC,cAAA,SACCF,EAAAC,EAAAC,cAAA,UAAQL,UAAU,eAAeyF,QAASE,GAA1C,WAIFxF,EAAAC,EAAAC,cAAA,OAAKL,UAAU,UACdG,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIE,QAAS,kBAAMd,EAAaU,IAAWG,KAAMH,GAAUlF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,wBAGnFG,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIE,QAAS,kBAAMd,EAAaW,IAAUE,KAAMF,GAASnF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,qBAGjFG,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,KAAGkF,OAAO,IAAIE,QAAS,kBAAMd,EAAaS,IAAWI,KAAMJ,GAAUjF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,yBC4NxE4F,cAtPX,SAAAA,EAAYxG,GAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoG,IACvBvG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsG,GAAAjG,KAAAH,KAAMJ,KAJF0D,OAAS,IAAIF,EAGMvD,EAFnBwG,QAAU,IAAIzC,EAKlB/D,EAAKyG,MAAQ,CACTC,QAAS,GAClB9B,MAAO,EACPC,OAAQ7E,EAAKwG,QAAQG,MACZ7B,MAAO,EACP6B,MAAO,EACPC,OAAQ,IACRC,OAAQ,GACjBC,SAAS,EACTC,OAAO,GAGR/G,EAAKgH,sBAAwBhH,EAAKgH,sBAAsBxG,KAA3BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC7BA,EAAKsG,QAAUtG,EAAKsG,QAAQ9F,KAAbP,OAAAQ,EAAA,EAAAR,CAAAD,IAhBcA,mFAoB7BG,KAAK8G,oBAEwC,OAAnC/B,aAAagC,QAAQ,WAAwD,OAAlChC,aAAagC,QAAQ,SAChE/G,KAAKgH,WAELhH,KAAKiH,qDAIMC,EAAmBC,GAElCpC,aAAaqC,QAAQ,QAASjG,KAAKC,UAAUpB,KAAKsG,QAClDvB,aAAaqC,QAAQ,SAAUjG,KAAKC,UAAUpB,KAAKsD,SACnDyB,aAAaqC,QAAQ,UAAWjG,KAAKC,UAAUpB,KAAKqG,sDAI1D,IAAMgB,EAAUtC,aAAagC,QAAQ,YACrB,OAAZM,GAAgC,SAAZA,IACvBtC,aAAaC,QACbD,aAAaqC,QAAQ,WAAY,6CAO5BpH,KAAKsH,0CAOX,IAAMjE,EAAQlC,KAAKoG,MAAMxC,aAAagC,QAAQ,WAAa,IAAIzD,OACzDoB,EAASvD,KAAKoG,MAAMxC,aAAagC,QAAQ,YAAc,IAAIjD,OAKjE9D,KAAKqD,MAAMA,GACXrD,KAAKqG,QAAU,IAAIzC,EAAMc,GAEnB,IAAM4B,EAAQnF,KAAKoG,MAAMxC,aAAagC,QAAQ,UAAY,IAC1D/G,KAAKwH,SAASlB,mCAGV,IAAAmB,EAAAzH,KACJ0H,QAAQC,IAAI,eAAgB3H,KAAKsG,MAAMG,QAEb,OAAtBzG,KAAKsG,MAAMG,QACXzG,KAAKwH,SAAS,CAAEb,SAAS,EAAMJ,QAAS,KACxCqB,WAAW,kBAAMH,EAAKD,SAAS,CAAEb,SAAS,KAAU,MAKpDrE,EACKuF,MAAM,CACHA,MAAOrF,EACPsF,UAAW,CACPC,MAAO/H,KAAKsG,MAAMG,UAGzBuB,KAAK,SAAAvG,GAAc,IAAXwG,EAAWxG,EAAXwG,KACCC,EAAYvF,EAAmBsF,EAAKC,UAAUA,WACpDT,EAAKU,aAAaD,GAElB,IAAMzB,GAAoC,IAA3BwB,EAAKC,UAAUE,QAAmBH,EAAKC,UAAUzB,OAAS,KACxFgB,EAAKD,SAAS,CAAEf,OAAQA,IACxB1B,aAAaqC,QAAQ,WAAY,WAErBiB,MAAM,SAACC,GACJb,EAAKD,SAAS,CAAEjB,QAAS,GAAII,SAAS,IACrDe,QAAQC,IAAI,0BAA2BW,EAAIC,SAC3CxD,aAAaqC,QAAQ,WAAY,+CAKrBc,GACTlI,KAAKwH,SAAS,CACVhB,MAAOxG,KAAKsG,MAAME,MAAQ0B,EAAUlF,SAExC,IAAIwF,EAAgC,GACpCN,EAAUrG,IAAI,SAACb,GACX,IAAMyH,EAAO,CACThI,KAAMO,EAASP,KACfiB,QAASV,EAASU,SAGtB8G,EAAY/E,KAAKgF,KAGrBzI,KAAKqD,MAAMmF,GACXxI,KAAK0I,OACL1I,KAAKwH,SAAS,CAACb,SAAS,kCAetBsB,GACFjI,KAAKsD,OAAS,IAAIF,EAAM6E,kCAKxB,GAAIjI,KAAKsD,OAAOkD,MAAQ,CACpB,IAAMmC,EAAW3I,KAAKsD,OAAOsF,UAC7B5I,KAAKwH,SAAS,CACVjB,QAASoC,EACThE,MAAO3E,KAAKsG,MAAM3B,MAAQ,SAM9B3E,KAAKsH,sDAIS/G,GAClB,IAAMsI,EAAS1H,KAAKoG,MAAMhH,EAAEwF,OAAO7E,OAGnClB,KAAK8I,KAAKD,GACV7I,KAAK0I,oCAGJG,GACsB,QAAlBA,EAAOnI,QACRV,KAAKwH,SAAS,CACV/C,MAAOzE,KAAKsG,MAAM7B,MAAQ,KAG9BzE,KAAKqG,QAAQ5C,KAAKzD,KAAKsG,MAAMC,SAE7BvG,KAAKsD,OAAOX,WAGhB3C,KAAKwH,SAAS,CAAEd,OAAQmC,EAAOnI,4CAcrCgH,QAAQC,IAAI,iBACZ3H,KAAKwH,SAAS,CAAEZ,OAAO,qCAIjB,IAAMmC,EAAwD,IAA9CjJ,OAAOkJ,QAAQhJ,KAAKsG,MAAMC,SAASvD,QAAgBhD,KAAKsG,MAAMC,QAAQ0C,cAAgBnJ,OAGtG4B,EAAUqH,EAAU,GAAKpG,EAAiB3C,KAAKsG,MAAMC,QAAQ7E,SAEnE,IAAM1B,KAAKsG,MAAMM,MAChB,OAAOjG,EAAAC,EAAAC,cAACqI,EAAD,CAAO/C,QAASnG,KAAKmG,UAGvB,GAAInG,KAAKsG,MAAMK,QACX,OAAOhG,EAAAC,EAAAC,cAACsI,EAAD,MAKX,GAA2B,OAAtBnJ,KAAKsG,MAAMG,QAAmBsC,EAC/B,OACIpI,EAAAC,EAAAC,cAACuI,EAAD,CACI3E,MAAOzE,KAAKsG,MAAM7B,MAClBE,MAAO3E,KAAKsG,MAAME,QAKpC,IAAM9B,EAAS1E,KAAKqG,QAAQG,MAItB,OAFNkB,QAAQC,IAAIjD,EAAQ1E,KAAKqG,SAGf1F,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwI,EAAAzI,EAAD,CACIJ,UAAU,YACV8I,UAAU,MACVC,eAAe,OACfC,uBAAwB,IACxBC,uBAAwB,IACxBC,wBAAyB,KAEzB/I,EAAAC,EAAAC,cAAA,OAAKmB,IAAKhC,KAAKsG,MAAMC,QAAQ9F,MACzBE,EAAAC,EAAAC,cAAC8I,EAAD,CAAUlJ,KAAMT,KAAKsG,MAAMC,QAAQ9F,KAAMiB,QAASA,EAASC,iBAAkB3B,KAAK6G,0BAQ1FlG,EAAAC,EAAAC,cAAC+I,EAAD,CACXnF,MAAOzE,KAAKsG,MAAM7B,MAClBC,OAAQA,EACOC,MAAO3E,KAAKsG,MAAME,gBAnPnBjF,aCZJsI,0LARX,OACElJ,EAAAC,EAAAC,cAAA,OAAKL,UAAU,OACbG,EAAAC,EAAAC,cAACiJ,EAAD,cAJUvI,cCQZwI,EAAcC,QACW,cAA7BxE,OAAOP,SAASgF,UAEe,UAA7BzE,OAAOP,SAASgF,UAEhBzE,OAAOP,SAASgF,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTpC,KAAK,SAAAyC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrE,QACfgE,UAAUC,cAAcO,YAI1BpD,QAAQC,IACN,iHAKE0C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB/C,QAAQC,IAAI,sCAGR0C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BpC,MAAM,SAAA4C,GACLvD,QAAQuD,MAAM,4CAA6CA,KClGjEC,IAASC,OAAOxK,EAAAC,EAAAC,cAACuK,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIiB,IACnBC,GACDhG,OAAOP,SAASe,MAEJyF,SAAWjG,OAAOP,SAASwG,OAIvC,OAGFjG,OAAOkG,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAuB,OAAMH,GAAN,sBAEPzB,GAgEV,SAAiCK,EAAeC,GAE9C/C,MAAM8C,GACHpC,KAAK,SAAA4D,GAEJ,IAAMC,EAAcD,EAASE,QAAQnI,IAAI,gBAEnB,MAApBiI,EAASlF,QACO,MAAfmF,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAMhE,KAAK,SAAAyC,GACjCA,EAAawB,aAAajE,KAAK,WAC7BxC,OAAOP,SAASC,aAKpBiF,EAAgBC,EAAOC,KAG1BhC,MAAM,WACLX,QAAQC,IACN,mEArFAuE,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMhE,KAAK,WACjCN,QAAQC,IACN,gHAMJwC,EAAgBC,EAAOC,MC/C/BE","file":"static/js/main.936b2091.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\ninterface IState {}\ninterface IProps {\n    question: string,\n    body: any,\n    handlerChoiceSelected: any\n}\n\nclass Choice extends Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props)\n\n        this.handlerChoiceSelected = this.handlerChoiceSelected.bind(this)\n    }\n\n    // generateRandomNumber = (min: number, max: number) => {\n    //     return Math.floor(Math.random() * (max - min + 1) + min)\n    // }\n\n    // componentDidMount() {}\n\n\n    handlerChoiceSelected(e: any) {\n        this.props.handlerChoiceSelected(e)\n    }\n\n    render() {\n        const props = this.props\n\n        const className = props.body.correct === 'true' ? 'radioCustomButtonSuccess' : 'radioCustomButton'\n\n        return (\n            <li className=\"choice-item icobutton\">\n                <input\n                    type=\"radio\"\n                    className={className}\n                    name={\"radioGroup\" + props.question}\n                    id={props.body.body}\n                    value={JSON.stringify(props.body)}\n                    onChange={this.handlerChoiceSelected}\n                />\n\n                <label className=\"radioCustomLabel\" htmlFor={props.body.body}>\n                    {props.body.body}\n                </label>\n            </li>\n        )\n    }\n}\n\nexport default Choice\n","import React from 'react'\nimport Choice from './Choice'\nimport { IQuestion, IChoice } from '../util/types'\n\ninterface IProps {\n    body: string,\n    choices: any,\n    onAnswerSelected: Function\n}\n\nconst Question = ({ body, choices, onAnswerSelected }: IProps) => {\n    return (\n        <div>\n            <h3 className=\"question\">\" { body } \"</h3>\n            <div>\n                <ul className=\"choice-list\">\n                    {\n                        Object.keys(choices).map(idx => {\n                            return <Choice key={idx} body={choices[idx]} question={body} handlerChoiceSelected={onAnswerSelected} />\n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Question\n","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\n\nconst cache = new InMemoryCache()\n\nconst link = new HttpLink({\n\turi: 'https://bookish.bleek.io/api'\n\t// uri: process.env.API_URL\n\t// uri: 'http://localhost:3003/'\n})\n\nexport const apiClient = new ApolloClient({\n    cache,\n    link\n})\n","import gql from 'graphql-tag'\n\nexport const GET_QUESTIONS = gql`\n        query questionList($after: String) {\n            questions(pageSize: 100, after: $after) {\n                cursor\n                hasMore\n                questions {\n                    id\n                    body\n                    choices {\n                        id\n                        body\n                        correct\n                    }\n                }\n            }\n        }\n    `;\n","export function shuffle<T>(array: Array<T>): Array<T> {\n    let currentIndex = array.length, tmp, randomIndex\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex -= 1\n\n        // And swap it with the current element.\n        tmp = array[currentIndex]\n        array[currentIndex] = array[randomIndex]\n        array[randomIndex] = tmp\n    }\n\n    return array\n}\n\n// function shuffleArray(array: IChoice[]) {\n//     \n// }","import { shuffle } from './helper'\nexport class Queue<T> {\n    private _queue: T[]\n\n    constructor(queue?: T[]) {\n        this._queue = queue || []\n    }\n\n    enqueue(item: T) {\n        this._queue.push(item)\n    }\n\n    dequeue(): T | any {\n        return this._queue.shift()\n    }\n\n    clear() {\n        this._queue = []\n    }\n\n    get count(): number {\n        return this._queue.length\n    }\n\n    shuffle() {\n        shuffle<T>(this._queue)\n    }\n}\n\nexport class Stack<T> {\n    private _stack: T[]\n\n    constructor(stack?: T[]) {\n        this._stack = stack || []\n    }\n\n    push(item: T) {\n        this._stack.push(item)\n    }\n\n    pop(): T | undefined {\n        return this._stack.pop()\n    }\n\n    empty() {\n        this._stack = []\n    }\n\n    get count(): number {\n        return this._stack.length\n    }\n\n    shuffle() {\n        shuffle<T>(this._stack)\n    }\n}\n\nexport interface IChoice {\n    body: String,\n    correct: Boolean\n}\n\nexport interface IQuestion {\n    body: String,\n    choices: IChoice\n}\n\n","import React from 'react'\n\nconst LoadingSpinner = () => (\n    <div>\n        <div>\n            Please wait while we get everything ready for you <i className=\"far fa-smile-wink\"></i>\n        </div>\n        <div className=\"loading_spinner-wrap\">\n            <svg\n                className=\"loading_spinner\"\n                width=\"60\"\n                height=\"20\"\n                viewBox=\"0 0 60 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <circle cx=\"7\" cy=\"15\" r=\"4\" />\n                <circle cx=\"30\" cy=\"15\" r=\"4\" />\n                <circle cx=\"53\" cy=\"15\" r=\"4\" />\n            </svg>\n        </div>\n    </div>\n)\n\nexport default LoadingSpinner","import React from 'react'\nimport './Progress.css'\n\ninterface IProps {\n\tscore: number,\n\tmissed: number,\n    total: number,\n}\n\nconst Progress = ({ score, missed, total }: IProps) => {\n    const progress = (score / total) * 100\n\n    const style = {\n        width: progress + '%'\n\t}\n\n\tconst red = {\n\t\tcolor: '#F00'\n\t}\n\n    return (\n        <div className=\"progress\">\n\t\t\t{score} <span style={red}>of {missed + score}</span> / {total}\n            <div className=\"meter clear animate\">\n                <span style={style}><span></span></span>\n            </div>\n        </div>\n    )\n}\n\nexport default Progress\n","import React from 'react'\nimport './End.css'\n\ninterface IProps {\n\tscore: number,\n\ttotal: number\n}\n\nconst clean = () => {\n    localStorage.clear()\n\tlocation.reload()\n}\n\nconst socialWindow = (url: string) => {\n    const width = 570\n    const left = (screen.width - width) / 2\n    const top = (screen.height - width) / 2\n    const params = \"menubar=no,toolbar=no,status=no,width=\" + width + \",height=\" + width + \",top=\" + top + \",left=\" + left\n\n    window.open(url, \"NewWindow\", params)\n}\n\nconst End = ({score, total}: IProps) => {\n    const url = 'https%3A%2F%2Fbookish.bleek.io%2F'\n\tconst text = 'Check+out+this+cool+Literature+Openings+Quiz+I+just+crushed.'\n\n    const linkedin = 'https://www.linkedin.com/shareArticle?mini=true&url=' + url + '&title=Bookish&summary=' + text + '&source=bookish'\n    const facebook = 'https://www.facebook.com/sharer.php?u=' + url\n    const twitter = 'https://twitter.com/intent/tweet?url=' + url + '&text=' + text + '&hashtags=literature,books,quiz'\n\n    return (\n        <div className=\"end\">\n            <span className=\"stats\">\n                <ul>\n                    <li>Score: <strong>{score}</strong></li>\n                    <li>Total Number of Questions: <strong>{total}</strong></li>\n                </ul>\n            </span>\n\n            <div>\n                <h1>bookish.</h1>\n                    <p>\n                        Hot Damn! Sadly, you have reached the end of this Quiz.\n                    </p>\n\n                    <p>\n                        But fear not! I'm hard at work crafting new questions\n                        which should be available anytime now.\n                    </p>\n\n                    <p>\n\t\t\t\t\tYou can reach me through <a target=\"_\" href=\"https://twitter.com/marcusekon\">twitter</a>, <a target=\"_\" href=\"https://www.linkedin.com/in/marcek/\">LinkedIn</a>, or <a target=\"_\" href=\"https://www.instagram.com/marcusekon/\">instagram</a> if you have any suggestions for improving this Quiz; or just to say Hi.\n                    </p>\n\n                    <p>\n                        In the meantime, if you wish to restart the Quiz, click <a href=\"#\" onClick={clean}>here</a>.\n                    </p>\n            </div>\n\n            <div className=\"social\">\n                <span>\n                    <a target=\"_\" onClick={() => socialWindow(facebook)} href={facebook}><i className=\"fab fa-facebook-f\"></i></a>\n                </span>\n\n                <span>\n                    <a target=\"_\" onClick={() => socialWindow(twitter)} href={twitter}><i className=\"fab fa-twitter\"></i></a>\n                </span>\n\n                <span>\n                    <a target=\"_\" onClick={() => socialWindow(linkedin)} href={linkedin}><i className=\"fab fa-linkedin\"></i></a>\n                </span>\n            </div>\n\n        </div>\n    )\n}\n\nexport default End\n","import React from 'react'\nimport './Start.css'\n\ninterface IProps {\n\tonStart: any\n}\n\nconst socialWindow = (url: string) => {\n\tconst width = 570\n\tconst left = (screen.width - width) / 2\n\tconst top = (screen.height - width) / 2\n\tconst params = \"menubar=no,toolbar=no,status=no,width=\" + width + \",height=\" + width + \",top=\" + top + \",left=\" + left\n\n\twindow.open(url, \"NewWindow\", params)\n}\n\nconst Start = ({ onStart }: IProps) => {\n\tconst url = 'https%3A%2F%2Fbookish.bleek.io%2F'\n\tconst text = 'Check+out+this+cool+Literature+Openings+Quiz+I+just+crushed.'\n\n\tconst linkedin = 'https://www.linkedin.com/shareArticle?mini=true&url=' + url + '&title=Bookish&summary=' + text + '&source=bookish'\n\tconst facebook = 'https://www.facebook.com/sharer.php?u=' + url\n\tconst twitter = 'https://twitter.com/intent/tweet?url=' + url + '&text=' + text + '&hashtags=literature,books,quiz'\n\n\treturn (\n\t\t<div className=\"start\">\n\t\t\t<div>\n\t\t\t\t<h1>bookish.</h1>\n\t\t\t\t<p>\n\t\t\t\t\tEveryone can appreciate great literature. There's something about that opening line that can just hook you in; and great openings, there have been a few over the centuries.\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tHere's your shot at proving how well you know them! :)\n\t\t\t\t</p>\n\n\n\t\t\t\t{/* <p>\n\t\t\t\t\tYou can reach me through <a target=\"_\" href=\"https://twitter.com/marcusekon\">twitter</a>, <a target=\"_\" href=\"https://www.linkedin.com/in/marcek/\">LinkedIn</a>, or <a target=\"_\" href=\"https://www.instagram.com/marcusekon/\">instagram</a> if you have any suggestions for improving this Quiz; or just to say Hi.\n\t\t\t\t</p> */}\n\n\t\t\t\t<p>\n\t\t\t\t\t<button className=\"start-button\" onClick={onStart}>Start</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div className=\"social\">\n\t\t\t\t<span>\n\t\t\t\t\t<a target=\"_\" onClick={() => socialWindow(facebook)} href={facebook}><i className=\"fab fa-facebook-f\"></i></a>\n\t\t\t\t</span>\n\n\t\t\t\t<span>\n\t\t\t\t\t<a target=\"_\" onClick={() => socialWindow(twitter)} href={twitter}><i className=\"fab fa-twitter\"></i></a>\n\t\t\t\t</span>\n\n\t\t\t\t<span>\n\t\t\t\t\t<a target=\"_\" onClick={() => socialWindow(linkedin)} href={linkedin}><i className=\"fab fa-linkedin\"></i></a>\n\t\t\t\t</span>\n\t\t\t</div>\n\n\t\t</div>\n\t)\n}\n\nexport default Start\n","import React, { Component } from 'react'\nimport Question from '../../components/Question'\nimport { apiClient } from '../../util/apiClient'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { GET_QUESTIONS } from '../../util/queries'\nimport { Queue, Stack, IQuestion, IChoice } from '../../util/types'\nimport LoadingSpinner from '../../components/LoadingSpinner'\nimport Progress from '../../components/Progress/Progress'\n// import Feedback from '../../components/Feedback/Feedback'\nimport End from '../../components/End/End'\nimport Start from '../../components/Start/Start'\nimport { shuffle } from '../../util/helper'\n\ninterface IState {\n    current: any,\n\tscore: number,\n\tmissed: number,\n    total: number,\n    count: number,\n    cursor: string | null,\n    status: string,\n\tloading: boolean,\n\tstart: boolean\n}\ninterface IProps {}\n\nclass Quiz extends Component<IProps, IState> {\n    private _queue = new Queue<IQuestion>()\n    private _missed = new Stack<IQuestion>()\n\n    constructor(props: IProps) {\n        super(props)\n\n        this.state = {\n            current: {},\n\t\t\tscore: 0,\n\t\t\tmissed: this._missed.count,\n            total: 0,\n            count: 0,\n            cursor: '0',\n            status: '',\n\t\t\tloading: true,\n\t\t\tstart: false\n        }\n\n\t\tthis.handlerAnswerSelected = this.handlerAnswerSelected.bind(this)\n\t\tthis.onStart = this.onStart.bind(this)\n\t}\n\n    componentDidMount() {\n\t\tthis.fixStorageCorrupt()\n\n        if (localStorage.getItem('_queue') === null || localStorage.getItem('state') === null ) {\n            this.remotely()\n        } else {\n            this.locally()\n        }\n    }\n\n    componentDidUpdate(prevProps: object, prevState: object) {\n        // console.log('syncing...')\n        localStorage.setItem('state', JSON.stringify(this.state))\n        localStorage.setItem('_queue', JSON.stringify(this._queue))\n        localStorage.setItem('_missed', JSON.stringify(this._missed))\n\t}\n\n\tfixStorageCorrupt() {\n\t\tconst corrupt = localStorage.getItem('_corrupt')\n\t\tif (corrupt === null || corrupt === 'true') {\n\t\t\tlocalStorage.clear()\n\t\t\tlocalStorage.setItem('_corrupt', 'false')\n\t\t}\n\t}\n\n    remotely() {\n        // console.log('remotely')\n\n        this.fetch()\n    }\n\n    locally() {\n        // console.log('locally')\n\n        // Restore Queue\n\t\tconst queue = JSON.parse(localStorage.getItem('_queue') || '')._queue\n\t\tconst missed = JSON.parse(localStorage.getItem('_missed') || '')._stack\n        // if (this.state.cursor !== null && queue.length == 0 ) {\n        //     this.setState({ cursor: null })\n        //     this.remotely()\n        // }\n\t\tthis.queue(queue)\n\t\tthis._missed = new Stack(missed)\n        // Restore State\n        const state = JSON.parse(localStorage.getItem('state') || '')\n        this.setState(state)\n    }\n\n    fetch() {\n        console.log('fetching...@', this.state.cursor)\n\n        if( this.state.cursor === null ) {\n            this.setState({ loading: true, current: {} })\n            setTimeout(() => this.setState({ loading: false }), 1000)\n\n            // console.log('no more questions')\n            // no more questions at this time\n        } else {\n            apiClient\n                .query({\n                    query: GET_QUESTIONS,\n                    variables: {\n                        after: this.state.cursor\n                    }\n                })\n                .then(({ data }) => {\n                    const questions = shuffle<IQuestion>(data.questions.questions)\n                    this.mapQuestions(questions)\n\n                    const cursor = data.questions.hasMore === true ? data.questions.cursor : null\n\t\t\t\t\tthis.setState({ cursor: cursor })\n\t\t\t\t\tlocalStorage.setItem('_corrupt', 'false')\n                })\n                .catch((err) => {\n                    this.setState({ current: {}, loading: true })\n\t\t\t\t\tconsole.log('Something went wrong...', err.message)\n\t\t\t\t\tlocalStorage.setItem('_corrupt', 'true')\n                })\n        }\n    }\n\n    mapQuestions(questions: Array<IQuestion>) {\n        this.setState({\n            count: this.state.count + questions.length\n        })\n        let reformatted: Array<IQuestion> = []\n        questions.map((question) => {\n            const newQ = {\n                body: question.body,\n                choices: question.choices\n            }\n\n            reformatted.push(newQ)\n        })\n\n        this.queue(reformatted)\n        this.next()\n        this.setState({loading: false})\n        // console.log('donE')\n    }\n\n    // mapChoices(choices: any) {\n    //     let formatted: any = {}\n    //     choices.map((choice: any) => {\n    //         formatted[choice.id] = {\n    //             body: choice.body,\n    //             correct: choice.correct\n    //         }\n    //     })\n    //     return formatted\n    // }\n\n    queue(data: Array<IQuestion>) {\n        this._queue = new Queue(data)\n\t}\n\n    next() {\n        // console.log(this._queue)\n        if( this._queue.count ) {\n            const dequeued = this._queue.dequeue()\n            this.setState({\n                current: dequeued,\n                total: this.state.total + 1\n            })\n\n            // console.log(this.state.current)\n            // console.log(this._queue)\n        } else {\n            this.fetch()\n        }\n    }\n\n    handlerAnswerSelected(e: any) {\n        const choice = JSON.parse(e.target.value)\n\n        // setTimeout(() => this.next(), 300)\n        this.eval(choice)\n        this.next()\n    }\n\n    eval(choice: any) {\n        if ( choice.correct == 'true' ) {\n            this.setState({\n                score: this.state.score + 1\n            })\n        } else {\n            this._missed.push(this.state.current)\n            // this._queue.enqueue(this.state.current)\n            this._queue.shuffle()\n        }\n\n        this.setState({ status: choice.correct })\n        // console.log('choice is' + choice.correct)\n        // Display Correct Answer\n        // Activate Next Button\n        // if (! this._queue.count) {\n        //     // add delay for last question\n        //     setTimeout(() => this.next(), 300)\n        // } else {\n        //     this.next()\n        // }\n        // this.next()\n\t}\n\n\tonStart() {\n\t\tconsole.log('starting quiz')\n\t\tthis.setState({ start: true })\n\t}\n\n    render() {\n        const isEmpty = Object.entries(this.state.current).length === 0 && this.state.current.constructor === Object\n        // const isEmpty = true\n\n\t\tconst choices = isEmpty ? [] : shuffle<IChoice>(this.state.current.choices)\n\n\t\tif (! this.state.start) {\n\t\t\treturn <Start onStart={this.onStart} />\n\t\t}\n\n        if (this.state.loading) {\n            return <LoadingSpinner />\n        }\n\n        //  && this.state.loading === false\n\n        if ( this.state.cursor === null && isEmpty ) {\n            return (\n                <End\n                    score={this.state.score}\n                    total={this.state.count}\n                />\n            )\n\t\t}\n\n\t\tconst missed = this._missed.count\n\n\t\tconsole.log(missed, this._missed)\n\n        return (\n            <div>\n                <ReactCSSTransitionGroup\n                    className=\"container\"\n                    component=\"div\"\n                    transitionName=\"fade\"\n                    transitionEnterTimeout={500}\n                    transitionLeaveTimeout={500}\n                    transitionAppearTimeout={500}\n                >\n                    <div key={this.state.current.body}>\n                        <Question body={this.state.current.body} choices={choices} onAnswerSelected={this.handlerAnswerSelected} />\n                    </div>\n                </ReactCSSTransitionGroup>\n\n                {/* <Feedback\n                        status={this.state.status}\n                    /> */}\n\n                <Progress\n\t\t\t\t\tscore={this.state.score}\n\t\t\t\t\tmissed={missed}\n                    total={this.state.count}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Quiz\n","import React, { Component } from 'react'\nimport Quiz from './pages/quiz'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Quiz />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}
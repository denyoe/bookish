{"version":3,"sources":["components/Choice.tsx","components/Question.tsx","util/apiClient.js","util/queries.js","util/helper.ts","util/types.ts","components/LoadingSpinner.tsx","components/Progress/Progress.tsx","components/End/End.tsx","pages/quiz/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Choice","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlerChoiceSelected","bind","assertThisInitialized","e","className","body","correct","react_default","a","createElement","type","name","question","id","value","JSON","stringify","onChange","htmlFor","Component","Question","_ref","choices","onAnswerSelected","keys","map","idx","components_Choice","key","cache","InMemoryCache","link","HttpLink","uri","apiClient","ApolloClient","GET_QUESTIONS","gql","_templateObject","shuffle","array","tmp","randomIndex","currentIndex","length","Math","floor","random","Queue","queue","_queue","createClass","item","push","shift","get","Stack","stack","_stack","pop","LoadingSpinner","width","height","viewBox","xmlns","cx","cy","r","Progress","score","total","style","clean","localStorage","clear","location","reload","socialWindow","url","left","screen","params","window","open","End","text","linkedin","facebook","twitter","target","href","onClick","Quiz","_missed","state","current","count","cursor","status","loading","handlerAnswerSelected","getItem","remotely","locally","prevProps","prevState","setItem","fetch","parse","setState","_this2","console","log","setTimeout","query","variables","after","then","data","questions","mapQuestions","hasMore","catch","err","message","reformatted","newQ","next","dequeued","dequeue","choice","eval","isEmpty","entries","constructor","components_LoadingSpinner","components_End_End","react_addons_css_transition_group_default","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppearTimeout","components_Question","components_Progress_Progress","App","quiz","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e090585.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\ninterface IState {}\ninterface IProps {\n    question: string,\n    body: any,\n    handlerChoiceSelected: any\n}\n\nclass Choice extends Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props)\n\n        this.handlerChoiceSelected = this.handlerChoiceSelected.bind(this)\n    }\n\n    // generateRandomNumber = (min: number, max: number) => {\n    //     return Math.floor(Math.random() * (max - min + 1) + min)\n    // }\n\n    componentDidMount() {}\n\n\n    handlerChoiceSelected(e: any) {\n        this.props.handlerChoiceSelected(e)\n    }\n\n    render() {\n        const props = this.props\n\n        const className = props.body.correct === 'true' ? 'radioCustomButtonSuccess' : 'radioCustomButton'\n\n        return (\n            <li className=\"choice-item icobutton\">\n                <input\n                    type=\"radio\"\n                    className={className}\n                    name={\"radioGroup\" + props.question}\n                    id={props.body.body}\n                    value={JSON.stringify(props.body)}\n                    onChange={this.handlerChoiceSelected}\n                />\n                \n                <label className=\"radioCustomLabel\" htmlFor={props.body.body}>\n                    {props.body.body}\n                </label>\n            </li>\n        )\n    }\n}\n\nexport default Choice","import React from 'react'\nimport Choice from './Choice'\nimport { IQuestion, IChoice } from '../util/types'\n\ntype Props = {\n    body: string,\n    choices: any,\n    onAnswerSelected: Function\n}\n\nconst Question = ({ body, choices, onAnswerSelected }: Props) => {\n    return (\n        <div>\n            <h3 className=\"question\">\" { body } \"</h3>\n            <div>\n                <ul className=\"choice-list\">\n                    {\n                        Object.keys(choices).map(idx => {\n                            return <Choice key={idx} body={choices[idx]} question={body} handlerChoiceSelected={onAnswerSelected} />\n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Question","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\n\nconst cache = new InMemoryCache()\n\nconst link = new HttpLink({\n\turi: 'https://bookish.bleek.io/api'\n\t// uri: 'http://localhost:3003/'\n})\n\nexport const apiClient = new ApolloClient({\n    cache,\n    link\n})\n","import gql from 'graphql-tag'\n\nexport const GET_QUESTIONS = gql`\n        query questionList($after: String) {\n            questions(pageSize: 100, after: $after) {\n                cursor\n                hasMore\n                questions {\n                    id\n                    body\n                    choices {\n                        id\n                        body\n                        correct\n                    }\n                }\n            }\n        }\n    `;\n","export function shuffle<T>(array: Array<T>): Array<T> {\n    let currentIndex = array.length, tmp, randomIndex\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex -= 1\n\n        // And swap it with the current element.\n        tmp = array[currentIndex]\n        array[currentIndex] = array[randomIndex]\n        array[randomIndex] = tmp\n    }\n\n    return array\n}\n\n// function shuffleArray(array: IChoice[]) {\n//     \n// }","import { shuffle } from './helper'\nexport class Queue<T> {\n    private _queue: T[]\n\n    constructor(queue?: T[]) {\n        this._queue = queue || []\n    }\n\n    enqueue(item: T) {\n        this._queue.push(item)\n    }\n\n    dequeue(): T | any {\n        return this._queue.shift()\n    }\n\n    clear() {\n        this._queue = []\n    }\n\n    get count(): number {\n        return this._queue.length\n    }\n\n    shuffle() {\n        shuffle<T>(this._queue)\n    }\n}\n\nexport class Stack<T> {\n    private _stack: T[]\n\n    constructor(stack?: T[]) {\n        this._stack = stack || []\n    }\n\n    push(item: T) {\n        this._stack.push(item)\n    }\n\n    pop(): T | undefined {\n        return this._stack.pop()\n    }\n\n    empty() {\n        this._stack = []\n    }\n\n    get count(): number {\n        return this._stack.length\n    }\n\n    shuffle() {\n        shuffle<T>(this._stack)\n    }\n}\n\nexport interface IChoice {\n    body: String,\n    correct: Boolean\n}\n\nexport interface IQuestion {\n    body: String,\n    choices: IChoice\n}\n\n","import React from 'react'\n\nconst LoadingSpinner = () => (\n    <div>\n        <div>\n            Please wait while we get everything ready for you <i className=\"far fa-smile-wink\"></i>\n        </div>\n        <div className=\"loading_spinner-wrap\">\n            <svg\n                className=\"loading_spinner\"\n                width=\"60\"\n                height=\"20\"\n                viewBox=\"0 0 60 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <circle cx=\"7\" cy=\"15\" r=\"4\" />\n                <circle cx=\"30\" cy=\"15\" r=\"4\" />\n                <circle cx=\"53\" cy=\"15\" r=\"4\" />\n            </svg>\n        </div>\n    </div>\n)\n\nexport default LoadingSpinner","import React from 'react'\nimport './Progress.css'\n\ntype Props = {\n    score: number,\n    total: number,\n}\n\nconst Progress = ({ score, total }: Props) => {\n    const progress = (score / total) * 100\n\n    const style = {\n        width: progress + '%'\n    }\n\n    return (\n        <div className=\"progress\">\n            {score} / {total}\n            <div className=\"meter clear animate\">\n                <span style={style}><span></span></span>\n            </div>\n        </div>\n    )\n}\n\nexport default Progress","import React from 'react'\nimport './End.css'\n\ninterface IProps {\n    score: number,\n    total: number\n}\n\nconst clean = () => {\n    localStorage.clear()\n    location.reload()\n}\n\nconst socialWindow = (url: string) => {\n    const width = 570\n    const left = (screen.width - width) / 2\n    const top = (screen.height - width) / 2\n    const params = \"menubar=no,toolbar=no,status=no,width=\" + width + \",height=\" + width + \",top=\" + top + \",left=\" + left\n\n    window.open(url, \"NewWindow\", params)\n}\n\nconst End = ({score, total}: IProps) => {\n    const url = 'https%3A%2F%2Fbookish.bleek.io%2F'\n    const text = 'Check+out+this+cool+Literature+Openings+Quiz+I+just+played.'\n\n    const linkedin = 'https://www.linkedin.com/shareArticle?mini=true&url=' + url + '&title=Bookish&summary=' + text + '&source=bookish'\n    const facebook = 'https://www.facebook.com/sharer.php?u=' + url\n    const twitter = 'https://twitter.com/intent/tweet?url=' + url + '&text=' + text + '&hashtags=literature,books,quiz'\n\n    return (\n        <div className=\"end\">\n            <span className=\"stats\">\n                <ul>\n                    <li>Score: <strong>{score}</strong></li>\n                    <li>Total Number of Questions: <strong>{total}</strong></li>\n                </ul>\n            </span>\n\n            <div>\n                <h1>bookish.</h1>\n                    <p>\n                        Hot Damn! Sadly, you have reached the end of this Quiz.\n                    </p>\n\n                    <p>\n                        But fear not! I'm hard at work crafting new questions\n                        which should be available anytime now.\n                    </p>\n\n                    <p>\n\t\t\t\t\tYou can reach me through <a target=\"_\" href=\"https://twitter.com/marcusekon\">twitter</a>, <a target=\"_\" href=\"https://www.linkedin.com/in/marcek/\">LinkedIn</a>, or <a target=\"_\" href=\"https://www.instagram.com/marcusekon/\">instagram</a> if you have any suggestions for improving this Quiz; or just to say Hi.\n                    </p>\n\n                    <p>\n                        In the meantime, if you wish to restart the Quiz, click <a href=\"#\" onClick={clean}>here</a>.\n                    </p>\n            </div>\n\n            <div className=\"social\">\n                <span>\n                    <a target=\"_\" onClick={() => socialWindow(facebook)} href={facebook}><i className=\"fab fa-facebook-f\"></i></a>\n                </span>\n\n                <span>\n                    <a target=\"_\" onClick={() => socialWindow(twitter)} href={twitter}><i className=\"fab fa-twitter\"></i></a>\n                </span>\n\n                <span>\n                    <a target=\"_\" onClick={() => socialWindow(linkedin)} href={linkedin}><i className=\"fab fa-linkedin\"></i></a>\n                </span>\n            </div>\n\n        </div>\n    )\n}\n\nexport default End\n","import React, { Component } from 'react'\nimport Question from '../../components/Question'\nimport { apiClient } from '../../util/apiClient'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { GET_QUESTIONS } from '../../util/queries'\nimport { Queue, Stack, IQuestion, IChoice } from '../../util/types'\nimport LoadingSpinner from '../../components/LoadingSpinner'\nimport Progress from '../../components/Progress/Progress'\n// import Feedback from '../../components/Feedback/Feedback'\nimport End from '../../components/End/End'\nimport { shuffle } from '../../util/helper'\n\ninterface IState {\n    current: any,\n    score: number,\n    total: number,\n    count: number,\n    cursor: string | null,\n    status: string,\n    loading: boolean\n}\ninterface IProps {}\n\nclass Quiz extends Component<IProps, IState> {\n    private _queue = new Queue<IQuestion>()\n    private _missed = new Stack<IQuestion>()\n\n    constructor(props: IProps) {\n        super(props)\n\n        this.state = {\n            current: {},\n            score: 0,\n            total: 0,\n            count: 0,\n            cursor: '0',\n            status: '',\n            loading: true\n        }\n\n        this.handlerAnswerSelected = this.handlerAnswerSelected.bind(this)\n    }\n\n    componentDidMount() {\n        if (localStorage.getItem('_queue') === null || localStorage.getItem('state') === null ) {\n            this.remotely()\n        } else {\n            this.locally()\n        }\n    }\n\n    componentDidUpdate(prevProps: object, prevState: object) {\n        // console.log('syncing...')\n        localStorage.setItem('state', JSON.stringify(this.state))\n        localStorage.setItem('_queue', JSON.stringify(this._queue))\n        localStorage.setItem('_missed', JSON.stringify(this._missed))\n    }\n\n    remotely() {\n        // console.log('remotely')\n\n        this.fetch()\n    }\n\n    locally() {\n        // console.log('locally')\n\n        // Restore Queue\n        const queue = JSON.parse(localStorage.getItem('_queue') || '')._queue\n        // if (this.state.cursor !== null && queue.length == 0 ) {\n        //     this.setState({ cursor: null })\n        //     this.remotely()\n        // }\n        this.queue(queue)\n        // Restore State\n        const state = JSON.parse(localStorage.getItem('state') || '')\n        this.setState(state)\n    }\n\n    fetch() {\n        console.log('fetching...@', this.state.cursor)\n\n        if( this.state.cursor === null ) {\n            this.setState({ loading: true, current: {} })\n            setTimeout(() => this.setState({ loading: false }), 1000)\n\n            // console.log('no more questions')\n            // no more questions at this time\n        } else {\n            apiClient\n                .query({\n                    query: GET_QUESTIONS,\n                    variables: {\n                        after: this.state.cursor\n                    }\n                })\n                .then(({ data }) => {\n                    const questions = shuffle<IQuestion>(data.questions.questions)\n                    this.mapQuestions(questions)\n\n                    const cursor = data.questions.hasMore === true ? data.questions.cursor : null\n                    this.setState({ cursor: cursor })\n                })\n                .catch((err) => {\n                    this.setState({ current: {}, loading: true })\n                    console.log('Something went wrong...', err.message)\n                })\n        }\n    }\n\n    mapQuestions(questions: Array<IQuestion>) {\n        this.setState({\n            count: this.state.count + questions.length\n        })\n        let reformatted: Array<IQuestion> = []\n        questions.map((question) => {\n            const newQ = {\n                body: question.body,\n                choices: question.choices\n            }\n\n            reformatted.push(newQ)\n        })\n\n        this.queue(reformatted)\n        this.next()\n        this.setState({loading: false})\n        // console.log('donE')\n    }\n\n    // mapChoices(choices: any) {\n    //     let formatted: any = {}\n    //     choices.map((choice: any) => {\n    //         formatted[choice.id] = {\n    //             body: choice.body,\n    //             correct: choice.correct\n    //         }\n    //     })\n    //     return formatted\n    // }\n\n    queue(data: Array<IQuestion>) {\n        this._queue = new Queue(data)\n    }\n\n    next() {\n        // console.log(this._queue)\n        if( this._queue.count ) {\n            const dequeued = this._queue.dequeue()\n            this.setState({\n                current: dequeued,\n                total: this.state.total + 1\n            })\n\n            // console.log(this.state.current)\n            // console.log(this._queue)\n        } else {\n            this.fetch()\n        }\n    }\n\n    handlerAnswerSelected(e: any) {\n        const choice = JSON.parse(e.target.value)\n\n        // setTimeout(() => this.next(), 300)\n        this.eval(choice)\n        this.next()\n    }\n\n    eval(choice: any) {\n        if ( choice.correct == 'true' ) {\n            this.setState({\n                score: this.state.score + 1\n            })\n        } else {\n            this._missed.push(this.state.current)\n            // this._queue.enqueue(this.state.current)\n            this._queue.shuffle()\n        }\n\n        this.setState({ status: choice.correct })\n        // console.log('choice is' + choice.correct)\n        // Display Correct Answer\n        // Activate Next Button\n        // if (! this._queue.count) {\n        //     // add delay for last question\n        //     setTimeout(() => this.next(), 300)\n        // } else {\n        //     this.next()\n        // }\n        // this.next()\n    }\n\n    render() {\n        const isEmpty = Object.entries(this.state.current).length === 0 && this.state.current.constructor === Object\n        // const isEmpty = true\n\n        const choices = isEmpty ? [] : shuffle<IChoice>(this.state.current.choices)\n\n        if (this.state.loading) {\n            return <LoadingSpinner />\n        }\n\n        //  && this.state.loading === false\n\n        if ( this.state.cursor === null && isEmpty ) {\n            return (\n                <End\n                    score={this.state.score}\n                    total={this.state.count}\n                />\n            )\n        }\n\n        return (\n            <div>\n                <ReactCSSTransitionGroup\n                    className=\"container\"\n                    component=\"div\"\n                    transitionName=\"fade\"\n                    transitionEnterTimeout={500}\n                    transitionLeaveTimeout={500}\n                    transitionAppearTimeout={500}\n                >\n                    <div key={this.state.current.body}>\n                        <Question body={this.state.current.body} choices={choices} onAnswerSelected={this.handlerAnswerSelected} />\n                    </div>\n                </ReactCSSTransitionGroup>\n\n                {/* <Feedback\n                        status={this.state.status}\n                    /> */}\n\n                <Progress\n                    score={this.state.score}\n                    total={this.state.count}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Quiz\n","import React, { Component } from 'react'\nimport Quiz from './pages/quiz'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Everyone can appreciate great literature. There's something about that opening line that can just hook you in; and great opening lines, there have been a few over the centuries. Here's your shot at proving how well you know them! :) */}\n        <Quiz />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}